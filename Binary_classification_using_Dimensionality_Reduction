{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91719,"databundleVersionId":12937777,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-08-22T16:53:12.830230Z","iopub.execute_input":"2025-08-22T16:53:12.830631Z","iopub.status.idle":"2025-08-22T16:53:12.839623Z","shell.execute_reply.started":"2025-08-22T16:53:12.830597Z","shell.execute_reply":"2025-08-22T16:53:12.838451Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s5e8/sample_submission.csv\n/kaggle/input/playground-series-s5e8/train.csv\n/kaggle/input/playground-series-s5e8/test.csv\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, RandomizedSearchCV\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, average_precision_score\nimport numpy as np","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T16:53:12.841077Z","iopub.execute_input":"2025-08-22T16:53:12.841606Z","iopub.status.idle":"2025-08-22T16:53:12.887395Z","shell.execute_reply.started":"2025-08-22T16:53:12.841571Z","shell.execute_reply":"2025-08-22T16:53:12.886246Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/playground-series-s5e8/train.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T16:53:12.888577Z","iopub.execute_input":"2025-08-22T16:53:12.888882Z","iopub.status.idle":"2025-08-22T16:53:14.817466Z","shell.execute_reply.started":"2025-08-22T16:53:12.888858Z","shell.execute_reply":"2025-08-22T16:53:14.816259Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"X = train.drop(columns = ['y'])\ny = train['y']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T16:53:14.818582Z","iopub.execute_input":"2025-08-22T16:53:14.818862Z","iopub.status.idle":"2025-08-22T16:53:14.918633Z","shell.execute_reply.started":"2025-08-22T16:53:14.818831Z","shell.execute_reply":"2025-08-22T16:53:14.917656Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"numeric = [\"age\", \"balance\", \"day\", \"duration\", \"campaign\", \"pdays\", \"previous\"]\ncategorical = [\"job\", \"marital\", \"education\", \"default\", \"housing\", \"loan\", \"contact\", \"month\", \"poutcome\"]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T16:53:14.921172Z","iopub.execute_input":"2025-08-22T16:53:14.921483Z","iopub.status.idle":"2025-08-22T16:53:14.926372Z","shell.execute_reply.started":"2025-08-22T16:53:14.921460Z","shell.execute_reply":"2025-08-22T16:53:14.925347Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"# Freeze categories from the full training data so OHE has a fixed width in every fold\nfrozen_categories = [sorted(X[col].dropna().unique().tolist()) for col in categorical]\nohe = OneHotEncoder(handle_unknown=\"ignore\", categories=frozen_categories, sparse_output=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T16:53:14.927539Z","iopub.execute_input":"2025-08-22T16:53:14.928532Z","iopub.status.idle":"2025-08-22T16:53:15.672842Z","shell.execute_reply.started":"2025-08-22T16:53:14.928502Z","shell.execute_reply":"2025-08-22T16:53:15.671801Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"preprocessor = ColumnTransformer([\n    (\"num\", StandardScaler(with_mean=False), numeric),\n    (\"cat\", ohe, categorical),\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T16:53:15.673683Z","iopub.execute_input":"2025-08-22T16:53:15.673931Z","iopub.status.idle":"2025-08-22T16:53:15.679064Z","shell.execute_reply.started":"2025-08-22T16:53:15.673913Z","shell.execute_reply":"2025-08-22T16:53:15.677762Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"# Compute a safe upper bound for SVD\ntotal_ohe = sum(len(c) for c in frozen_categories)     # 44\nn_features = len(numeric) + total_ohe                  # 51\nmax_svd = max(2, n_features - 1)                       # 50\n\npipe = Pipeline([\n    (\"prep\", preprocessor),\n    (\"svd\", TruncatedSVD(n_components=min(40, max_svd), random_state=42)),\n    (\"model\", LogisticRegression(max_iter=1000, class_weight=\"balanced\"))\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T16:53:15.680067Z","iopub.execute_input":"2025-08-22T16:53:15.680329Z","iopub.status.idle":"2025-08-22T16:53:15.711660Z","shell.execute_reply.started":"2025-08-22T16:53:15.680308Z","shell.execute_reply":"2025-08-22T16:53:15.710283Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"# Small search that respects the cap\nparam_dist = {\n    \"svd__n_components\": [10, 20, 30, min(40, max_svd), max_svd],\n    \"model__C\": np.logspace(-2, 2, 7)\n}\n\nX_tr, X_val, y_tr, y_val = train_test_split(\n    X, y, test_size=0.2, stratify=y, random_state=42\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T16:53:15.712695Z","iopub.execute_input":"2025-08-22T16:53:15.712985Z","iopub.status.idle":"2025-08-22T16:53:16.298751Z","shell.execute_reply.started":"2025-08-22T16:53:15.712963Z","shell.execute_reply":"2025-08-22T16:53:16.297856Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"cv = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)\nsearch = RandomizedSearchCV(\n    pipe, param_distributions=param_dist, n_iter=10,\n    scoring=\"average_precision\", cv=cv, n_jobs=-1, verbose=1, random_state=42\n)\nsearch.fit(X_tr, y_tr)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T16:53:16.299916Z","iopub.execute_input":"2025-08-22T16:53:16.300276Z","iopub.status.idle":"2025-08-22T16:56:29.340956Z","shell.execute_reply.started":"2025-08-22T16:53:16.300247Z","shell.execute_reply":"2025-08-22T16:56:29.339882Z"}},"outputs":[{"name":"stdout","text":"Fitting 3 folds for each of 10 candidates, totalling 30 fits\n","output_type":"stream"},{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"RandomizedSearchCV(cv=StratifiedKFold(n_splits=3, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('prep',\n                                              ColumnTransformer(transformers=[('num',\n                                                                               StandardScaler(with_mean=False),\n                                                                               ['age',\n                                                                                'balance',\n                                                                                'day',\n                                                                                'duration',\n                                                                                'campaign',\n                                                                                'pdays',\n                                                                                'previous']),\n                                                                              ('cat',\n                                                                               OneHotEncoder(categories=[['admin.',\n                                                                                                          'blue-collar',\n                                                                                                          'entrepreneur',\n                                                                                                          'housemaid',\n                                                                                                          'management',\n                                                                                                          're...\n                                              TruncatedSVD(n_components=40,\n                                                           random_state=42)),\n                                             ('model',\n                                              LogisticRegression(class_weight='balanced',\n                                                                 max_iter=1000))]),\n                   n_jobs=-1,\n                   param_distributions={'model__C': array([1.00000000e-02, 4.64158883e-02, 2.15443469e-01, 1.00000000e+00,\n       4.64158883e+00, 2.15443469e+01, 1.00000000e+02]),\n                                        'svd__n_components': [10, 20, 30, 40,\n                                                              50]},\n                   random_state=42, scoring='average_precision', verbose=1)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=StratifiedKFold(n_splits=3, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[(&#x27;prep&#x27;,\n                                              ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                                               StandardScaler(with_mean=False),\n                                                                               [&#x27;age&#x27;,\n                                                                                &#x27;balance&#x27;,\n                                                                                &#x27;day&#x27;,\n                                                                                &#x27;duration&#x27;,\n                                                                                &#x27;campaign&#x27;,\n                                                                                &#x27;pdays&#x27;,\n                                                                                &#x27;previous&#x27;]),\n                                                                              (&#x27;cat&#x27;,\n                                                                               OneHotEncoder(categories=[[&#x27;admin.&#x27;,\n                                                                                                          &#x27;blue-collar&#x27;,\n                                                                                                          &#x27;entrepreneur&#x27;,\n                                                                                                          &#x27;housemaid&#x27;,\n                                                                                                          &#x27;management&#x27;,\n                                                                                                          &#x27;re...\n                                              TruncatedSVD(n_components=40,\n                                                           random_state=42)),\n                                             (&#x27;model&#x27;,\n                                              LogisticRegression(class_weight=&#x27;balanced&#x27;,\n                                                                 max_iter=1000))]),\n                   n_jobs=-1,\n                   param_distributions={&#x27;model__C&#x27;: array([1.00000000e-02, 4.64158883e-02, 2.15443469e-01, 1.00000000e+00,\n       4.64158883e+00, 2.15443469e+01, 1.00000000e+02]),\n                                        &#x27;svd__n_components&#x27;: [10, 20, 30, 40,\n                                                              50]},\n                   random_state=42, scoring=&#x27;average_precision&#x27;, verbose=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=StratifiedKFold(n_splits=3, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[(&#x27;prep&#x27;,\n                                              ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                                               StandardScaler(with_mean=False),\n                                                                               [&#x27;age&#x27;,\n                                                                                &#x27;balance&#x27;,\n                                                                                &#x27;day&#x27;,\n                                                                                &#x27;duration&#x27;,\n                                                                                &#x27;campaign&#x27;,\n                                                                                &#x27;pdays&#x27;,\n                                                                                &#x27;previous&#x27;]),\n                                                                              (&#x27;cat&#x27;,\n                                                                               OneHotEncoder(categories=[[&#x27;admin.&#x27;,\n                                                                                                          &#x27;blue-collar&#x27;,\n                                                                                                          &#x27;entrepreneur&#x27;,\n                                                                                                          &#x27;housemaid&#x27;,\n                                                                                                          &#x27;management&#x27;,\n                                                                                                          &#x27;re...\n                                              TruncatedSVD(n_components=40,\n                                                           random_state=42)),\n                                             (&#x27;model&#x27;,\n                                              LogisticRegression(class_weight=&#x27;balanced&#x27;,\n                                                                 max_iter=1000))]),\n                   n_jobs=-1,\n                   param_distributions={&#x27;model__C&#x27;: array([1.00000000e-02, 4.64158883e-02, 2.15443469e-01, 1.00000000e+00,\n       4.64158883e+00, 2.15443469e+01, 1.00000000e+02]),\n                                        &#x27;svd__n_components&#x27;: [10, 20, 30, 40,\n                                                              50]},\n                   random_state=42, scoring=&#x27;average_precision&#x27;, verbose=1)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;prep&#x27;,\n                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n                                                  StandardScaler(with_mean=False),\n                                                  [&#x27;age&#x27;, &#x27;balance&#x27;, &#x27;day&#x27;,\n                                                   &#x27;duration&#x27;, &#x27;campaign&#x27;,\n                                                   &#x27;pdays&#x27;, &#x27;previous&#x27;]),\n                                                 (&#x27;cat&#x27;,\n                                                  OneHotEncoder(categories=[[&#x27;admin.&#x27;,\n                                                                             &#x27;blue-collar&#x27;,\n                                                                             &#x27;entrepreneur&#x27;,\n                                                                             &#x27;housemaid&#x27;,\n                                                                             &#x27;management&#x27;,\n                                                                             &#x27;retired&#x27;,\n                                                                             &#x27;self-employed&#x27;,\n                                                                             &#x27;services&#x27;,\n                                                                             &#x27;student&#x27;,\n                                                                             &#x27;technician&#x27;,\n                                                                             &#x27;unemployed&#x27;,\n                                                                             &#x27;unknown&#x27;],\n                                                                            [&#x27;divorc...\n                                                                            [&#x27;apr&#x27;,\n                                                                             &#x27;aug&#x27;,\n                                                                             &#x27;dec&#x27;,\n                                                                             &#x27;feb&#x27;,\n                                                                             &#x27;jan&#x27;,\n                                                                             &#x27;jul&#x27;,\n                                                                             &#x27;jun&#x27;,\n                                                                             &#x27;mar&#x27;,\n                                                                             &#x27;may&#x27;,\n                                                                             &#x27;nov&#x27;,\n                                                                             &#x27;oct&#x27;,\n                                                                             &#x27;sep&#x27;],\n                                                                            [&#x27;failure&#x27;,\n                                                                             &#x27;other&#x27;,\n                                                                             &#x27;success&#x27;,\n                                                                             &#x27;unknown&#x27;]],\n                                                                handle_unknown=&#x27;ignore&#x27;),\n                                                  [&#x27;job&#x27;, &#x27;marital&#x27;,\n                                                   &#x27;education&#x27;, &#x27;default&#x27;,\n                                                   &#x27;housing&#x27;, &#x27;loan&#x27;, &#x27;contact&#x27;,\n                                                   &#x27;month&#x27;, &#x27;poutcome&#x27;])])),\n                (&#x27;svd&#x27;, TruncatedSVD(n_components=40, random_state=42)),\n                (&#x27;model&#x27;,\n                 LogisticRegression(class_weight=&#x27;balanced&#x27;, max_iter=1000))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">prep: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;, StandardScaler(with_mean=False),\n                                 [&#x27;age&#x27;, &#x27;balance&#x27;, &#x27;day&#x27;, &#x27;duration&#x27;,\n                                  &#x27;campaign&#x27;, &#x27;pdays&#x27;, &#x27;previous&#x27;]),\n                                (&#x27;cat&#x27;,\n                                 OneHotEncoder(categories=[[&#x27;admin.&#x27;,\n                                                            &#x27;blue-collar&#x27;,\n                                                            &#x27;entrepreneur&#x27;,\n                                                            &#x27;housemaid&#x27;,\n                                                            &#x27;management&#x27;,\n                                                            &#x27;retired&#x27;,\n                                                            &#x27;self-employed&#x27;,\n                                                            &#x27;services&#x27;,\n                                                            &#x27;student&#x27;,\n                                                            &#x27;technician&#x27;,\n                                                            &#x27;unemployed&#x27;,\n                                                            &#x27;unknown&#x27;],\n                                                           [&#x27;divorced&#x27;,\n                                                            &#x27;married&#x27;,\n                                                            &#x27;single&#x27;],\n                                                           [&#x27;primary&#x27;,\n                                                            &#x27;secondary&#x27;,\n                                                            &#x27;tertiary&#x27;,\n                                                            &#x27;unknown&#x27;],\n                                                           [&#x27;no&#x27;, &#x27;yes&#x27;],\n                                                           [&#x27;no&#x27;, &#x27;yes&#x27;],\n                                                           [&#x27;no&#x27;, &#x27;yes&#x27;],\n                                                           [&#x27;cellular&#x27;,\n                                                            &#x27;telephone&#x27;,\n                                                            &#x27;unknown&#x27;],\n                                                           [&#x27;apr&#x27;, &#x27;aug&#x27;, &#x27;dec&#x27;,\n                                                            &#x27;feb&#x27;, &#x27;jan&#x27;, &#x27;jul&#x27;,\n                                                            &#x27;jun&#x27;, &#x27;mar&#x27;, &#x27;may&#x27;,\n                                                            &#x27;nov&#x27;, &#x27;oct&#x27;,\n                                                            &#x27;sep&#x27;],\n                                                           [&#x27;failure&#x27;, &#x27;other&#x27;,\n                                                            &#x27;success&#x27;,\n                                                            &#x27;unknown&#x27;]],\n                                               handle_unknown=&#x27;ignore&#x27;),\n                                 [&#x27;job&#x27;, &#x27;marital&#x27;, &#x27;education&#x27;, &#x27;default&#x27;,\n                                  &#x27;housing&#x27;, &#x27;loan&#x27;, &#x27;contact&#x27;, &#x27;month&#x27;,\n                                  &#x27;poutcome&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;age&#x27;, &#x27;balance&#x27;, &#x27;day&#x27;, &#x27;duration&#x27;, &#x27;campaign&#x27;, &#x27;pdays&#x27;, &#x27;previous&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler(with_mean=False)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[&#x27;job&#x27;, &#x27;marital&#x27;, &#x27;education&#x27;, &#x27;default&#x27;, &#x27;housing&#x27;, &#x27;loan&#x27;, &#x27;contact&#x27;, &#x27;month&#x27;, &#x27;poutcome&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(categories=[[&#x27;admin.&#x27;, &#x27;blue-collar&#x27;, &#x27;entrepreneur&#x27;, &#x27;housemaid&#x27;,\n                           &#x27;management&#x27;, &#x27;retired&#x27;, &#x27;self-employed&#x27;, &#x27;services&#x27;,\n                           &#x27;student&#x27;, &#x27;technician&#x27;, &#x27;unemployed&#x27;, &#x27;unknown&#x27;],\n                          [&#x27;divorced&#x27;, &#x27;married&#x27;, &#x27;single&#x27;],\n                          [&#x27;primary&#x27;, &#x27;secondary&#x27;, &#x27;tertiary&#x27;, &#x27;unknown&#x27;],\n                          [&#x27;no&#x27;, &#x27;yes&#x27;], [&#x27;no&#x27;, &#x27;yes&#x27;], [&#x27;no&#x27;, &#x27;yes&#x27;],\n                          [&#x27;cellular&#x27;, &#x27;telephone&#x27;, &#x27;unknown&#x27;],\n                          [&#x27;apr&#x27;, &#x27;aug&#x27;, &#x27;dec&#x27;, &#x27;feb&#x27;, &#x27;jan&#x27;, &#x27;jul&#x27;, &#x27;jun&#x27;,\n                           &#x27;mar&#x27;, &#x27;may&#x27;, &#x27;nov&#x27;, &#x27;oct&#x27;, &#x27;sep&#x27;],\n                          [&#x27;failure&#x27;, &#x27;other&#x27;, &#x27;success&#x27;, &#x27;unknown&#x27;]],\n              handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">TruncatedSVD</label><div class=\"sk-toggleable__content\"><pre>TruncatedSVD(n_components=40, random_state=42)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(class_weight=&#x27;balanced&#x27;, max_iter=1000)</pre></div></div></div></div></div></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":24},{"cell_type":"code","source":"best = search.best_estimator_\nprint(\"Best params:\", search.best_params_)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T16:56:29.342606Z","iopub.execute_input":"2025-08-22T16:56:29.342915Z","iopub.status.idle":"2025-08-22T16:56:29.349873Z","shell.execute_reply.started":"2025-08-22T16:56:29.342885Z","shell.execute_reply":"2025-08-22T16:56:29.348414Z"}},"outputs":[{"name":"stdout","text":"Best params: {'svd__n_components': 50, 'model__C': 21.54434690031882}\n","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"# Evaluate\nproba = best.predict_proba(X_val)[:, 1]\npred = (proba >= 0.5).astype(int)\nprint(classification_report(y_val, pred, digits=4))\nprint(\"Confusion matrix:\\n\", confusion_matrix(y_val, pred))\nprint(\"ROC AUC:\", roc_auc_score(y_val, proba))\nprint(\"PR AUC:\", average_precision_score(y_val, proba))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T16:56:29.350759Z","iopub.execute_input":"2025-08-22T16:56:29.351107Z","iopub.status.idle":"2025-08-22T16:56:30.113491Z","shell.execute_reply.started":"2025-08-22T16:56:29.351076Z","shell.execute_reply":"2025-08-22T16:56:30.112566Z"}},"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0     0.9815    0.8685    0.9216    131902\n           1     0.4789    0.8807    0.6204     18098\n\n    accuracy                         0.8700    150000\n   macro avg     0.7302    0.8746    0.7710    150000\nweighted avg     0.9209    0.8700    0.8852    150000\n\nConfusion matrix:\n [[114560  17342]\n [  2159  15939]]\nROC AUC: 0.9433502889344275\nPR AUC: 0.6753290929978297\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"# Fit on full train and make submission\nbest.fit(X, y)\ntest = pd.read_csv(\"/kaggle/input/playground-series-s5e8/test.csv\")\nsubmission = pd.DataFrame({\"id\": test[\"id\"], \"y\": best.predict_proba(test.drop(columns=[\"id\"]))[:, 1]})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T16:56:30.114454Z","iopub.execute_input":"2025-08-22T16:56:30.114705Z","iopub.status.idle":"2025-08-22T16:56:56.705293Z","shell.execute_reply.started":"2025-08-22T16:56:30.114687Z","shell.execute_reply":"2025-08-22T16:56:56.703911Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"# convert sol to csv\nsubmission.to_csv('submission.csv', index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T16:56:56.708795Z","iopub.execute_input":"2025-08-22T16:56:56.709133Z","iopub.status.idle":"2025-08-22T16:56:57.322910Z","shell.execute_reply.started":"2025-08-22T16:56:56.709101Z","shell.execute_reply":"2025-08-22T16:56:57.321957Z"}},"outputs":[],"execution_count":28}]}